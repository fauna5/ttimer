{"version":3,"sources":["RidersFinishing.js","FinishLog.js","App.js","serviceWorker.js","index.js"],"names":["RidersFinishing","riders","timeRider","className","style","height","map","time","number","disabled","key","onClick","width","backgroundColor","opacity","color","FinishLog","finshedRiders","filter","length","display","flexDirection","alignItems","borderTop","last","first","borderBottom","justifyContent","paddingLeft","format","App","state","rider","startTime","Date","now","riderNumber","console","log","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"khBAyBeA,MAvBf,YAAiD,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACjC,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAAEC,OAAQ,SACnCJ,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACV,4BACEC,WAAYF,EACZG,IAAKF,EACLG,QAAS,kBAAMT,EAAUM,IACzBJ,MAAO,CACLQ,MAAO,QACPP,OAAQ,QACRQ,gBAAiB,OACjBC,QAAWP,EAAO,GAAM,EACxBQ,MAAO,UAGRP,Q,QCwBIQ,MAvCf,YAAgC,IACxBC,EADuB,EAAVhB,OACUiB,QAAO,sBAAGX,QACvC,OAA6B,IAAzBU,EAAcE,OACT,KAIP,yBACEhB,UAAU,YACVC,MAAO,CACLgB,QAAS,OACTC,cAAe,SACfC,WAAY,aACZC,UAAW,mBAGZN,EAAcX,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQgB,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,MAAvB,OACjB,yBACEf,IAAKF,EACLJ,MAAO,CACLkB,WAAY,SACZI,aAAc,iBACdX,MAAO,OACPK,QAAS,OACTf,OAAQ,OACRsB,eAAgB,QAChBC,YAAa,MACbhB,MAAO,UAGT,6BACGJ,EADH,MACcqB,YAAOtB,EAAO,KAAY,YADxC,MACwDiB,EADxD,KACgEC,S,OCM3DK,E,YAjCb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACX9B,OAAQA,EAAOK,KAAI,SAAA0B,GAAK,sBAAUA,EAAV,CAAiBC,UAAWC,KAAKC,YAH/C,E,uEAOJC,GACRC,QAAQC,IAAI,SAAUF,GACtBG,KAAKC,SAAS,CACZvC,OAAQsC,KAAKR,MAAM9B,OAAOK,KAAI,SAAA0B,GAC5B,GAAIA,EAAMxB,SAAW4B,EACnB,OAAOJ,EAET,IAAMzB,EAAO2B,KAAKC,MAAQH,EAAMC,UAChC,OAAO,eAAKD,EAAZ,CAAmBzB,gB,+BAKf,IAAD,OACP,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,CACEF,OAAQsC,KAAKR,MAAM9B,OACnBC,UAAW,SAACM,GAAD,OAAY,EAAKN,UAAUM,MAExC,kBAAC,EAAD,CAAWJ,MAAO,CAACC,OAAQ,QAASJ,OAAQsC,KAAKR,MAAM9B,c,GA5B7CwC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.e867432a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction RidersFinishing({ riders, timeRider }) {\n  return (\n    <div className=\"App\" style={{ height: '70vh' }}>\n      {riders.map(({ time, number }) => (\n        <button\n          disabled={!!time}\n          key={number}\n          onClick={() => timeRider(number)}\n          style={{\n            width: '100px',\n            height: '100px',\n            backgroundColor: 'blue',\n            opacity: !!time ? 0.5 : 1,\n            color: 'white',\n          }}\n        >\n          {number}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default RidersFinishing;\n","import React from 'react';\nimport { format } from 'date-fns';\n\nfunction FinishLog({ riders }) {\n  const finshedRiders = riders.filter(({ time }) => !!time);\n  if (finshedRiders.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"FinishLog\"\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        borderTop: '1px solid grey',\n      }}\n    >\n      {finshedRiders.map(({ time, number, last, first }) => (\n        <div\n          key={number}\n          style={{\n            alignItems: 'center',\n            borderBottom: '1px solid grey',\n            color: 'grey',\n            display: 'flex',\n            height: '40px',\n            justifyContent: 'start',\n            paddingLeft: '5vw',\n            width: '100vw',\n          }}\n        >\n          <div>\n            {number} - {format(time - 60*60*1000, 'HH:mm:ss')} - {last}, {first}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FinishLog;\n","import React from 'react';\nimport './App.css';\nimport RidersFinishing from './RidersFinishing';\nimport FinishLog from './FinishLog';\nimport riders from './riders.json';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      riders: riders.map(rider => ({ ...rider, startTime: Date.now() })),\n    };\n  }\n\n  timeRider(riderNumber) {\n    console.log('timing', riderNumber);\n    this.setState({\n      riders: this.state.riders.map(rider => {\n        if (rider.number !== riderNumber) {\n          return rider;\n        }\n        const time = Date.now() - rider.startTime;\n        return { ...rider, time };\n      }),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <RidersFinishing\n          riders={this.state.riders}\n          timeRider={(number) => this.timeRider(number)}\n        />\n        <FinishLog style={{height: '30vh'}} riders={this.state.riders} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}